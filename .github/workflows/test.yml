name: Auto comment on Push and Pull Request

on: 
  pull_request:
    branches: 
      - dev

jobs:
  comment_on_pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Executable Permissions
        run: chmod +x .github/scripts/*.sh

      - name: Fetch SonarQube metrics
        env:
          SONAR_TOKEN: sqa_d6528deb2bd094bf1fc06cf85d8edd30f213622f
          SONAR_HOST_URL: https://sonarqube.paltechops.org
        run: .github/scripts/fetch_sonar_metrics.sh
  
      - name: Label PR based on SonarQube result
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo "PR:$PR_NUMBER"
          echo "Hello.."
          # pr_no = ${{ github.event.pull_request.number }}

          # Function to create or update label
          manage_label() {
            local label_name=$1
            local label_color=$2
            LABEL_API_URL="https://api.github.com/repos/${{ github.repository }}/labels/$label_name"

            curl -s -X PATCH "$LABEL_API_URL" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$(jq -n --arg name "$label_name" --arg color "$label_color" '{name: $name, color: $color}')" \
              || \
            curl -s -X POST "https://api.github.com/repos/${{ github.repository }}/labels" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$(jq -n --arg name "$label_name" --arg color "$label_color" '{name: $name, color: $color}')"
          }

          # Function to apply label to PR
          apply_label() {
            local label=$1
            curl -s -X POST "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/labels" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$(jq -n --arg label "$label" '[$label]')"
            echo "label: $label"
          }

          # Function to remove previous labels if needed
          remove_labels() {
            for label in "$@"; do
              curl -s -X DELETE "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/labels/$label" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" || true
            done
          }
          PARAMS_COLOR="f9d423" # yellow
          ## 1. SonarQube result label
          if [[ "${{ env.ALERT_STATUS }}" == "ERROR" ]]; then
            SONAR_LABEL="sonarqube_failed"
            SONAR_COLOR="d73a4a" # red
          else
            SONAR_LABEL="sonarqube_passed"
            SONAR_COLOR="0e8a16" # green
          fi

          manage_label "$SONAR_LABEL" "$SONAR_COLOR"
          remove_labels sonarqube_failed sonarqube_passed
          apply_label "$SONAR_LABEL"

          manage_label "issues:${{ env.NEW_ISSUES }}" "$PARAMS_COLOR"
          apply_label "issues:${{ env.NEW_ISSUES }} "

          manage_label "duplications:${{ env.DUPLICATIONS }}" "$PARAMS_COLOR"
          apply_label "duplications:${{ env.DUPLICATIONS }}"
          
          manage_label "security:${{ env.SECURITY_HOTSPOTS }}" "$PARAMS_COLOR"
          apply_label "security:${{ env.SECURITY_HOTSPOTS }}"
          


